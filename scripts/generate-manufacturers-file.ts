import fs from 'node:fs';
import path from 'node:path';
import { load } from 'cheerio';

/**
 * Stores all functionality for writing to a file as a stream
 */
class FileStream {
  private stream: fs.WriteStream;

  constructor(path: string) {
    this.stream = fs.createWriteStream(path);
  }

  public write(line?: string) {
    if (line) this.stream.write(line);
    this.stream.write('\n');
  }

  public close() {
    this.stream.close();
  }
}

/**
 * Scape the Wikipedia page for vins and generate the ts file with all the
 * manufacturers.
 * @example
 * // Example output file
 * export enum manufacturers {
 *   AAA: 'Audi South Africa made by Volkswagen of South Africa',
 *   RL4: 'Toyota Motor Vietnam',
 *   SAH: 'Honda made by Austin Rover Group',
 * }
 */
async function generate() {
  const ManufacturersFile = 'src/constants/manufacturer.constant.ts';
  const WikipediaPage =
    'https://en.wikipedia.org/wiki/Vehicle_identification_number';
  const Continents = [
    'Africa',
    'Asia',
    'Europe',
    'North America',
    'Oceania',
    'South America',
  ];

  const res = await fetch(WikipediaPage);
  const $ = load(await res.text());

  const file = new FileStream(ManufacturersFile);
  const readablePath =
    path.basename(__dirname) + '/' + path.basename(__filename);

  file.write('// @ts-nocheck');
  file.write('// Skip Typescript check for number only enum keys');
  file.write('// Code generated by ' + readablePath);
  file.write();
  file.write('/**');
  file.write(' * Known vehicle manufacturers by WMI');
  file.write(' * @see ' + WikipediaPage);
  file.write(' */');
  file.write('export enum manufacturers {');

  $('table').each((_, element) => {
    const firstHeaderCell = $(element).find('th:first-child').text().trim();

    // Scrape just the manufacturers table
    if (!firstHeaderCell.includes('WMI')) return;

    // Cache the manufacturers we have inserted to avoid duplicate properties
    const seen = new Set<string>();
    const rows = $(element).find('tr');
    rows.each((_, row) => {
      const rowData: any = [];

      $(row)
        .find('span')
        .each((_, span) => {
          const continent = $(span).text();
          if (Continents.includes(continent)) {
            file.write();
            file.write(`  // ${continent}`);
          }
        });

      $(row)
        .find('td')
        .each((_, cell) => {
          rowData.push($(cell).text().trim());
        });

      if (rowData.length < 2) return;

      // Cell can have multiple values
      const codes = rowData[0].split(' ');
      let description = rowData.pop() as string;

      description = description
        .replace(/'/g, "\\'") // Escape single quotes
        .replace(/\[\d+\]/g, '') // Remove Wikipedia references like [17]
        .replace(/–/g, '-'); // Replace the char "–" with a regular hyphen "-"

      codes.forEach((code: string) => {
        if (
          seen.has(code) ||
          code.includes('I') ||
          code.includes('Q') ||
          code.includes('O')
        ) {
          return;
        }

        seen.add(code);
        file.write(`  '${code}' = '${description}',`); // Write each manufacturer as an object property
      });
    });
  });

  file.write('}');
  file.close();

  console.log('Generated file', ManufacturersFile);
}

generate();
